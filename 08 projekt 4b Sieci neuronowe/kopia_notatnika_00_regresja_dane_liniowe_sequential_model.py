# -*- coding: utf-8 -*-
"""Kopia notatnika 00 regresja dane liniowe_sequential_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CsNXs0yV1ZEn-FKjTV4zVTpUYGakVwjj
"""

import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense

# Generowanie danych losowych - trend liniowy
np.random.seed(0)
X = np.random.rand(100, 1)  # Generowanie 100 punktów losowych danych X
X = np.sort(X, axis=0) #sortuje macierz X wzdłuż osi 0, co oznacza sortowanie wzdłuż kolumn. Jeśli chcesz posortować wzdłuż wierszy, użyj axis=1.
y = 2 * X + 1 + np.random.randn(100, 1) * 0.01  # Generowanie danych y = 2X + 1 + szum

# Definiowanie modelu korzystając z metody 'add()' klasy 'Sequential()'
# https://keras.io/guides/sequential_model/
'''do uzupelnienia'''
'''do uzupelnienia'''  # Dodanie jednej warstwy Dense z jednym neuronem

# wypisanie wag
'''do uzupelnienia'''

# podsumowanie modelu
'''do uzupelnienia'''

'''
do uzupelnienia
model = Sequential()
model.weights
model.summary()
'''

# Kompilacja modelu
model.compile(optimizer='SGD', loss='mean_squared_error')  # Kompilacja modelu z optymalizatorem SGD i funkcją straty MSE
# SGD (Stochastic Gradient Descent): Podstawowy optymalizator, który aktualizuje parametry w kierunku przeciwnym do gradientu funkcji straty.
# Adam (Adaptive Moment Estimation): Skuteczny optymalizator łączący zalety algorytmu momentum i RMSProp. Jest to często używany optymalizator ze względu na jego efektywność w wielu zastosowaniach.

# Trenowanie modelu
history = model.fit(X, y, epochs=100, verbose=0)  # Trenowanie modelu przez 1000 epok

# Przewidywanie na danych treningowych
predictions = model.predict(X)  # Wygenerowanie przewidywań modelu dla danych X

# Wykres danych treningowych i przewidywań modelu
plt.scatter(X, y, color='blue', label='Dane treningowe')  # Wykres danych treningowych
plt.plot(X, predictions, color='red', linewidth=3, label='Przewidywania modelu')  # Wykres przewidywań modelu
plt.xlabel('X')  # Etykieta osi X
plt.ylabel('y')  # Etykieta osi Y
plt.title('Regresja liniowa przy użyciu Keras')  # Tytuł wykresu
plt.legend()  # Dodanie legendy
plt.show()  # Wyświetlenie wykresu

# Wykres MSE vs epoki
plt.plot(history.history['loss'], label='MSE (training data)')
plt.title('Mean Squared Error (MSE) vs Epochs')
plt.ylabel('MSE')
plt.xlabel('Epoch')
plt.legend(loc="upper right")
plt.show()

# Sprawdzanie wyników
print("Współczynniki regresji:")
weights = model.layers[0].get_weights()  # Pobranie wag modelu
print("W = {}, b = {}".format(weights[0][0][0], weights[1][0]))  # Wyświetlenie współczynników regresji